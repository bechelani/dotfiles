#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

source $DOTFILES_ROOT/script/prompt
source $DOTFILES_ROOT/script/linkfile

set -e

install_dotfiles () {
  echo
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_dependencies () {
  # If we're on a Mac, let's install and setup homebrew.
  if [ "$(uname -s)" == "Darwin" ]
  then
    echo
    info "installing dependencies"

    echo
    echo "› setting macos defaults"
    $DOTFILES_ROOT/macos/set-defaults.sh

    # Install software
    echo
    echo "› $DOTFILES_ROOT/script/install"
    $DOTFILES_ROOT/script/install

    #if source bin/dot | while read -r data; do echo "$data"; done
    #then
    #  success "dependencies installed"
    #  echo
    #  echo "Now updating dependencies..."
    #  pip3 install --upgrade setuptools
    #else
    #  fail "error installing dependencies"
    #fi
  fi
}

configure_powershell () {
  # powershell config
  echo
  info "configuring powershell"

  if ! [ -d "$HOME/.config/powershell" ] ; then
    mkdir -p "$HOME/.config/powershell"
  fi

  link_file "$DOTFILES_ROOT/powershell/Microsoft.PowerShell_profile.ps1" "$HOME/.config/powershell/Microsoft.PowerShell_profile.ps1"

  success "powershell configured"
}

configure_vsCode () {
  # symlink VSCode User Settings

  echo ""
  info "Configuring VS Code"

  if [ -d "$HOME/Library/Application Support/Code/User" ] ; then
    info "  making backup of current settings.json and creating symlink..."
    link_file "$DOTFILES_ROOT/code/settings.json" "$HOME/Library/Application Support/Code/User/settings.json" && success "settings.json for vs code symlink created"
    #mv $HOME/Library/Application\ Support/Code/User/settings.json $HOME/Library/Application\ Support/Code/User/settings.old.json && success "settings.old.json created"
    #ln -s $HOME/.dotfiles/code/settings.json $HOME/Library/Application\ Support/Code/User/settings.json && success "settings.json for vs code symlink created"
  else
    info "  VS Code does not appear to be installed or has not been launched yet."
    info "  trying to launch VS Code"

    user "Please launch VS Code then press enter."
    read -n 1 -e vscode

    if [ -d "$HOME/Library/Application Support/Code/User" ] ; then
      link_file "$DOTFILES_ROOT/code/settings.json" "$HOME/Library/Application Support/Code/User/settings.json" && success "settings.json for vs code symlink created"
    else
      info "  symlink for vs code settings not created"
      info "  VS Code does not appear to be installed or has not been launched yet. Cannot create symlink for VS Code User settings..."
    fi
  fi

}

configure_iterm2 () {
  # iterm2 config

  echo ""

  info "configuring iTerm2"
  user "Do you currently use iTerm2 and would you like to set your custom colors? y/n "
  read -n 1 -e action

  if [[ $action =~ ^[Yy]$ ]] ; then
    # Specify the preferences directory
    defaults write com.googlecode.iterm2 PrefsCustomFolder -string "$HOME/.itermcfg/"

    # Tell iTerm2 to use the custom preferences in the directory
    defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true

    if [[ $? -eq 0 ]] ; then
      success "successfully configured iTerm2 to use your custom colors..."
    else
      fail "failed to apply your custom colors..." >&2
    fi
  else
    info "You chose not to use iTerm2 or your custom colors."
  fi
}

beche_fontSetup () {
  # install Source Code Pro nerd font
  sudo cp $HOME/.dotfiles/fonts/Source\ Code\ Pro\ Nerd\ Font\ Complete.ttf /Library/Fonts
  sudo cp $HOME/.dotfiles/fonts/Caskaydia\ Cove\ Nerd\ Font\ Complete.ttf /Library/Fonts
  success "Source Code Pro font and Caskaydia Cove font copied successfully!"
}

install_dotfiles
install_dependencies

configure_powershell
configure_vsCode
configure_iterm2

beche_fontSetup

success 'Badass macOS terminal installed!'
